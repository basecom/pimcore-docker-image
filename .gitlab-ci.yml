default:
    tags:
        - 'bsc-eks-x86'
    interruptible: true

stages:
    - build
    - publish
    - clean


.docker buildx:
    image: docker:stable
    services:
        -   name: docker:dind
            entrypoint: ['env', '-u', 'DOCKER_HOST']
            command: ['dockerd-entrypoint.sh', '--experimental']
    variables:
        DOCKER_HOST: tcp://docker:2375
        DOCKER_DRIVER: overlay2
        DOCKER_CLI_EXPERIMENTAL: enabled
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        - mkdir -p ~/.docker/cli-plugins/
        - wget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.10.0/buildx-v0.10.0.linux-amd64
        - chmod a+x ~/.docker/cli-plugins/docker-buildx

.kubernetes kaniko:
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: ['']
    before_script:
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json


.build image kaniko:
    stage: build
    extends: .kubernetes kaniko
    script:
        - |
            /kaniko/executor \
                --context "${CI_PROJECT_DIR}" \
                --dockerfile "${CI_PROJECT_DIR}/build/${IMAGE_NAME}/${PHP_VERSION}/${IMAGE_VARIANT}/${SYSTEM}/Dockerfile" \
                --destination "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}-${ARCH}"  \
                --cache=true

.build image buildx:
    stage: build
    extends: .docker buildx
    script:
        - |
            KUBECONFIG=/dev/null docker buildx create \
            --driver kubernetes \
            --driver-opt rootless=true \
            --driver-opt namespace=gitlab-runner-x86 \
            --platform "linux/amd64,linux/arm64/v8" \
            --config files/docker/buildkitd.toml \
            --use
        - |
            docker buildx build \
                --push \
                --platform "linux/amd64,linux/arm64/v8" \
                --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}-cache \
                --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}-cache \
                -f ${PROJECT_DIR}/build/${IMAGE_NAME}/${PHP_VERSION}/${IMAGE_VARIANT}/${SYSTEM}/Dockerfile \
                -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} \
                ${CI_PROJECT_DIR}

.publish image:
    stage: publish
    extends: .docker buildx
    script:
        - |
            docker manifest create ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} \
                --amend ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}-amd \
                --amend ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}-arm
        - docker manifest push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}

.clean image tags:
    stage: clean
    variables:
        REG_SHA256: ade837fc5224acd8c34732bf54a94f579b47851cc6a7fd5899a98386b782e228
        REG_VERSION: 0.16.1
    before_script:
        - apk add --no-cache curl
        - curl --fail --show-error --location "https://github.com/genuinetools/reg/releases/download/v$REG_VERSION/reg-linux-amd64" --output /usr/local/bin/reg
        - echo "$REG_SHA256  /usr/local/bin/reg" | sha256sum -c -
        - chmod a+x /usr/local/bin/reg
    script:
        - /usr/local/bin/reg rm -d --auth-url ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${IMAGE_TAG}-arm
        - /usr/local/bin/reg rm -d --auth-url ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${IMAGE_TAG}-amd

include:
    - local: /gitlab-ci/includes.yaml
